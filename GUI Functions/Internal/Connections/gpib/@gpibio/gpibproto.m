function [methodinfo,structs,enuminfo,ThunkLibName]=gpibproto
%GPIBPROTO Create structures to define interfaces found in 'ni488'.

%This function was generated by loadlibrary.m parser version 1.1.6.24 on Tue Jun 10 13:11:07 2008
%perl options:'ni488.i -outfile=gpibproto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern int _stdcall iblockxA ( int ud , int LockWaitTime , PCHAR LockShareName ); 
fcns.name{fcnNum}='iblockxA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall iblockxW ( int ud , int LockWaitTime , PWCHAR LockShareName ); 
fcns.name{fcnNum}='iblockxW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibunlockx ( int ud ); 
fcns.name{fcnNum}='ibunlockx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibfindA ( LPCSTR udname ); 
fcns.name{fcnNum}='ibfindA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall ibbnaA ( int ud , LPCSTR udname ); 
fcns.name{fcnNum}='ibbnaA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall ibrdfA ( int ud , LPCSTR filename ); 
fcns.name{fcnNum}='ibrdfA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall ibwrtfA ( int ud , LPCSTR filename ); 
fcns.name{fcnNum}='ibwrtfA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall ibfindW ( LPCWSTR udname ); 
fcns.name{fcnNum}='ibfindW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibbnaW ( int ud , LPCWSTR udname ); 
fcns.name{fcnNum}='ibbnaW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibrdfW ( int ud , LPCWSTR filename ); 
fcns.name{fcnNum}='ibrdfW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibwrtfW ( int ud , LPCWSTR filename ); 
fcns.name{fcnNum}='ibwrtfW'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibask ( int ud , int option , PINT v ); 
fcns.name{fcnNum}='ibask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibcac ( int ud , int v ); 
fcns.name{fcnNum}='ibcac'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibclr ( int ud ); 
fcns.name{fcnNum}='ibclr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibcmd ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibcmd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibcmda ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibcmda'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibconfig ( int ud , int option , int v ); 
fcns.name{fcnNum}='ibconfig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibdev ( int boardID , int pad , int sad , int tmo , int eot , int eos ); 
fcns.name{fcnNum}='ibdev'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibdiag ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibdiag'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibdma ( int ud , int v ); 
fcns.name{fcnNum}='ibdma'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibexpert ( int ud , int option , void * Input , void * Output ); 
fcns.name{fcnNum}='ibexpert'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall ibeos ( int ud , int v ); 
fcns.name{fcnNum}='ibeos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibeot ( int ud , int v ); 
fcns.name{fcnNum}='ibeot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibgts ( int ud , int v ); 
fcns.name{fcnNum}='ibgts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibist ( int ud , int v ); 
fcns.name{fcnNum}='ibist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall iblck ( int ud , int v , unsigned int LockWaitTime , void * Reserved ); 
fcns.name{fcnNum}='iblck'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall iblines ( int ud , PSHORT result ); 
fcns.name{fcnNum}='iblines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibln ( int ud , int pad , int sad , PSHORT listen ); 
fcns.name{fcnNum}='ibln'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall ibloc ( int ud ); 
fcns.name{fcnNum}='ibloc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibnotify ( int ud , int mask , GpibNotifyCallback_t Callback , PVOID RefData ); 
fcns.name{fcnNum}='ibnotify'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall ibonl ( int ud , int v ); 
fcns.name{fcnNum}='ibonl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibpad ( int ud , int v ); 
fcns.name{fcnNum}='ibpad'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibpct ( int ud ); 
fcns.name{fcnNum}='ibpct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibpoke ( int ud , long option , long v ); 
fcns.name{fcnNum}='ibpoke'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'long', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibppc ( int ud , int v ); 
fcns.name{fcnNum}='ibppc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibrd ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibrd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibrda ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibrda'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibrpp ( int ud , PCHAR ppr ); 
fcns.name{fcnNum}='ibrpp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall ibrsc ( int ud , int v ); 
fcns.name{fcnNum}='ibrsc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibrsp ( int ud , PCHAR spr ); 
fcns.name{fcnNum}='ibrsp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall ibrsv ( int ud , int v ); 
fcns.name{fcnNum}='ibrsv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibsad ( int ud , int v ); 
fcns.name{fcnNum}='ibsad'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibsic ( int ud ); 
fcns.name{fcnNum}='ibsic'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibsre ( int ud , int v ); 
fcns.name{fcnNum}='ibsre'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibstop ( int ud ); 
fcns.name{fcnNum}='ibstop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibtmo ( int ud , int v ); 
fcns.name{fcnNum}='ibtmo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibtrg ( int ud ); 
fcns.name{fcnNum}='ibtrg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibwait ( int ud , int mask ); 
fcns.name{fcnNum}='ibwait'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibwrt ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibwrt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall ibwrta ( int ud , PVOID buf , long cnt ); 
fcns.name{fcnNum}='ibwrta'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int _stdcall iblock ( int ud ); 
fcns.name{fcnNum}='iblock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ibunlock ( int ud ); 
fcns.name{fcnNum}='ibunlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall ThreadIbsta ( void ); 
fcns.name{fcnNum}='ThreadIbsta'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern int _stdcall ThreadIberr ( void ); 
fcns.name{fcnNum}='ThreadIberr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern int _stdcall ThreadIbcnt ( void ); 
fcns.name{fcnNum}='ThreadIbcnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern long _stdcall ThreadIbcntl ( void ); 
fcns.name{fcnNum}='ThreadIbcntl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern void _stdcall AllSpoll ( int boardID , Addr4882_t * addrlist , PSHORT results ); 
fcns.name{fcnNum}='AllSpoll'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall DevClear ( int boardID , Addr4882_t addr ); 
fcns.name{fcnNum}='DevClear'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16'};fcnNum=fcnNum+1;
% extern void _stdcall DevClearList ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='DevClearList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall EnableLocal ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='EnableLocal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall EnableRemote ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='EnableRemote'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall FindLstn ( int boardID , Addr4882_t * addrlist , Addr4882_t * results , int limit ); 
fcns.name{fcnNum}='FindLstn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall FindRQS ( int boardID , Addr4882_t * addrlist , PSHORT dev_stat ); 
fcns.name{fcnNum}='FindRQS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall PPoll ( int boardID , PSHORT result ); 
fcns.name{fcnNum}='PPoll'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall PPollConfig ( int boardID , Addr4882_t addr , int dataLine , int lineSense ); 
fcns.name{fcnNum}='PPollConfig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall PPollUnconfig ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='PPollUnconfig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall PassControl ( int boardID , Addr4882_t addr ); 
fcns.name{fcnNum}='PassControl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16'};fcnNum=fcnNum+1;
% extern void _stdcall RcvRespMsg ( int boardID , PVOID buffer , long cnt , int Termination ); 
fcns.name{fcnNum}='RcvRespMsg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall ReadStatusByte ( int boardID , Addr4882_t addr , PSHORT result ); 
fcns.name{fcnNum}='ReadStatusByte'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall Receive ( int boardID , Addr4882_t addr , PVOID buffer , long cnt , int Termination ); 
fcns.name{fcnNum}='Receive'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16', 'voidPtr', 'long', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall ReceiveSetup ( int boardID , Addr4882_t addr ); 
fcns.name{fcnNum}='ReceiveSetup'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16'};fcnNum=fcnNum+1;
% extern void _stdcall ResetSys ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='ResetSys'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall Send ( int boardID , Addr4882_t addr , PVOID databuf , long datacnt , int eotMode ); 
fcns.name{fcnNum}='Send'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16', 'voidPtr', 'long', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall SendCmds ( int boardID , PVOID buffer , long cnt ); 
fcns.name{fcnNum}='SendCmds'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern void _stdcall SendDataBytes ( int boardID , PVOID buffer , long cnt , int eot_mode ); 
fcns.name{fcnNum}='SendDataBytes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'long', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall SendIFC ( int boardID ); 
fcns.name{fcnNum}='SendIFC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern void _stdcall SendLLO ( int boardID ); 
fcns.name{fcnNum}='SendLLO'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern void _stdcall SendList ( int boardID , Addr4882_t * addrlist , PVOID databuf , long datacnt , int eotMode ); 
fcns.name{fcnNum}='SendList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr', 'voidPtr', 'long', 'int32'};fcnNum=fcnNum+1;
% extern void _stdcall SendSetup ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='SendSetup'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall SetRWLS ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='SetRWLS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall TestSRQ ( int boardID , PSHORT result ); 
fcns.name{fcnNum}='TestSRQ'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall TestSys ( int boardID , Addr4882_t * addrlist , PSHORT results ); 
fcns.name{fcnNum}='TestSys'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall Trigger ( int boardID , Addr4882_t addr ); 
fcns.name{fcnNum}='Trigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16'};fcnNum=fcnNum+1;
% extern void _stdcall TriggerList ( int boardID , Addr4882_t * addrlist ); 
fcns.name{fcnNum}='TriggerList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
% extern void _stdcall WaitSRQ ( int boardID , PSHORT result ); 
fcns.name{fcnNum}='WaitSRQ'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int16Ptr'};fcnNum=fcnNum+1;
methodinfo=fcns;